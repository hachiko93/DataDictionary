package DataDictionaryDSL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_StructureRef_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_StructureRef_NonTypesystemRule() {
  }
  public void applyRule(final SNode structureRef, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> children = SNodeOperations.getChildren(structureRef);
    for (SNode node : children) {
      {
        final SNode field = node;
        if (SNodeOperations.isInstanceOf(field, MetaAdapterFactory.getConcept(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, "DataDictionaryDSL.structure.FieldRef"))) {
          for (SNode sibling : SNodeOperations.getAllSiblings(node, false)) {
            {
              final SNode sibField = sibling;
              if (SNodeOperations.isInstanceOf(sibField, MetaAdapterFactory.getConcept(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, "DataDictionaryDSL.structure.FieldRef"))) {
                if (SLinkOperations.getTarget(field, MetaAdapterFactory.getReferenceLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, 0x15def33a0dfb8bdcL, "fieldRef")) == SLinkOperations.getTarget(sibField, MetaAdapterFactory.getReferenceLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, 0x15def33a0dfb8bdcL, "fieldRef"))) {
                  {
                    MessageTarget errorTarget = new NodeMessageTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(structureRef, "Structure reference already contains that field reference", "r:75428752-4662-436a-adf4-adbba92abeb2(DataDictionaryDSL.typesystem)", "3414057865179203495", null, errorTarget);
                  }
                }
              }
            }
          }
          List<SNode> addedFields = ListSequence.fromList(new LinkedList<SNode>());
          List<SNode> structureFields = ListSequence.fromList(new LinkedList<SNode>());
          for (SNode reference : SLinkOperations.getChildren(SLinkOperations.getTarget(structureRef, MetaAdapterFactory.getReferenceLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8be7L, 0x2f612b8a38801abaL, "structureRef")), MetaAdapterFactory.getContainmentLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x2f612b8a387ed98eL, 0x2f612b8a387ed98fL, "fieldRef"))) {
            {
              final SNode ref = reference;
              if (SNodeOperations.isInstanceOf(ref, MetaAdapterFactory.getConcept(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, "DataDictionaryDSL.structure.FieldRef"))) {
                ListSequence.fromList(addedFields).addElement(SLinkOperations.getTarget(ref, MetaAdapterFactory.getReferenceLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, 0x15def33a0dfb8bdcL, "fieldRef")));
              }
            }
          }
          for (SNode reference : SLinkOperations.getChildren(SLinkOperations.getTarget(structureRef, MetaAdapterFactory.getReferenceLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8be7L, 0x2f612b8a38801abaL, "structureRef")), MetaAdapterFactory.getContainmentLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x2f612b8a387ed98eL, 0x2f612b8a387ed98fL, "fieldRef"))) {
            {
              final SNode ref = reference;
              if (SNodeOperations.isInstanceOf(ref, MetaAdapterFactory.getConcept(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, "DataDictionaryDSL.structure.FieldRef"))) {
                ListSequence.fromList(structureFields).addElement(SLinkOperations.getTarget(ref, MetaAdapterFactory.getReferenceLink(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8bdbL, 0x15def33a0dfb8bdcL, "fieldRef")));
              }
            }
          }
          if (!(ListSequence.fromList(structureFields).containsSequence(ListSequence.fromList(addedFields)))) {
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(structureRef, "Structure cannot contain reference to fields that are not her's ", "r:75428752-4662-436a-adf4-adbba92abeb2(DataDictionaryDSL.typesystem)", "3414057865180040572", null, errorTarget);
            }
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xbf590b41a0a34576L, 0x9cd0dea0bf554be3L, 0x15def33a0dfb8be7L, "DataDictionaryDSL.structure.StructureRef");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
