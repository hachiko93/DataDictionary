package DataDictionaryDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractStructure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Aggregation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDictionary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Domain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExclusiveSpecialization = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Field = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonExclusiveSpecialization = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Predefined = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Restriction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StructureField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UserDefined = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractField;
      case 1:
        return props_AbstractStructure;
      case 2:
        return props_Aggregation;
      case 3:
        return props_DataDictionary;
      case 4:
        return props_Domain;
      case 5:
        return props_ExclusiveSpecialization;
      case 6:
        return props_Field;
      case 7:
        return props_FieldRef;
      case 8:
        return props_NonExclusiveSpecialization;
      case 9:
        return props_Predefined;
      case 10:
        return props_Restriction;
      case 11:
        return props_StructureField;
      case 12:
        return props_UserDefined;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
